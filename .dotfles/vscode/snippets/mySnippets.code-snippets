{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

		// "class property" :{
		// 	"scope": "csharp",
		// 	"prefix": ["property", "class"],
		// 	"body": [
		// 		"public string? $1 { get; set; }"
		// 	]
		// }

		"summary" : {
			"scope": "csharp",
			"prefix": ["summary", "///"],
			"body": [
				"/// <summary> $1 </summary>"
			]
		},

		"param" : {
			"scope": "csharp",
			"prefix": ["parameter", "param", "///"],
			"body": [
				"/// <param name=\"name\">description</param>"
			]
		},

		"returns" : {
			"scope": "csharp",
			"prefix": ["returns", "///"],
			"body": [
				"/// <returns> $1 </returns>"
			]
		},

		"endpoint" : {
			"prefix": "endpoint",
			"scope": "csharp",
			"body": [
				"[HttpPost]",
				"[ProducesResponseType(StatusCodes.Status204NoContent)]",
				"[ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"[ProducesResponseType(StatusCodes.Status500InternalServerError)]",
				"public async Task<IActionResult> $1 ()",
				"{",
					"try",
					"{",
						"return Ok();",
					"}",
					"catch (Exception ex)",
					"{",
						"_logger.LogError(ex, $\"Exception in {nameof(UsersController)}/{nameof(GetUsers)}\");",
						"return this.StatusCode(StatusCodes.Status500InternalServerError);",
					"}",
				"}"
			]
		},

		"serialize" : {
			"scope": "csharp",
			"prefix": "serialize",
			"body": "JsonSerializer.Serialize($1)"
		},

		"deserialize" : {
			"scope": "csharp",
			"prefix": "deserialize",
			"body": "JsonSerializer.Deserialize<Dictionary<string, dynamic>>($1)"
		},

		"controller" : {
			"scope": "csharp",
			"prefix": ["controller"],
			"body": [
				"namespace NanoLockSec.Services.Management.Api.Controllers",
				"",
				"{",
				"    /// <summary>",
				"    ///     this class handles the query requests for audit data",
				"    /// </summary>",
				"    [ApiController]",
				"    [ApiVersion(\"1.0\")]",
				"    [Route(\"api/[controller]/[action]\")]",
				"    [Produces(\"application/json\")]",
				"    [ServiceFilter(typeof(AuthTokensValidationAttribute))]",
				"    public class ExternalDevicesDashboardController : Controller",
				"    {",
				"        private readonly IStorageClient _storageClient;",
				"        private readonly ILogger<AuditController> _logger;",
				"",
				"        /// <summary>  </summary>",
				"        public ExternalDevicesDashboardController(",
				"            IStorageClient storageClient,",
				"            ILogger<AuditController> logger",
				"        ){",
				"            _storageClient = storageClient;",
				"            _logger = logger;",
				"        }",
				"",
				"        /// <summary>  </summary>",
				"        [HttpPost]",
				"        [ProducesResponseType(StatusCodes.Status204NoContent)]",
				"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"        [ProducesResponseType(StatusCodes.Status500InternalServerError)]",
				"        // [ClaimRequirement()] TODO: add correct permissions",
				"        public async Task<IActionResult> DevicesProtectionStatus ([FromBody] AuditQueryParameters parameters){",
				"            ",
				"",
				"            return this.Json(new {});",
				"",
				"        }",
				"    }",
				"}",
				"",
			],
		},

		"console write line" : {
			"scope": "csharp",
			"prefix": ["wl", "cw"],
			"body": "Console.WriteLine($1);"
		},

		"minimal api middleware": {
			"scope": "csharp",
			"prefix": ["middleware", "app.Use"],
		},

		"retrun this": {
			"scope": "scharp",
			"prefix" : ["rt", "retrun", "this"],
			"body" : "retrun this;"
		}


		"deamon Service": {
			"scope": "Plain Text",
			"prefix": ["service", "deamon"],
			"body": [
				"[Unit]",
				"Description=<Your service description>",
				"After=multi-user.target",
				"",
				"[Service]",
				"Type=forking",
				"User=<user_to_run_the_service>",
				"Group=<group_of_the_user>",
				"WorkingDirectory=<path_to_your_executable>",
				"ExecStart=<path_to_your_executable>",
				"",
				"[Install]",
				"WantedBy=multi-user.target"
			]
		}


}